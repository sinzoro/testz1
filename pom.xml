<project 
    xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-4.0.0.xsd">

    <!--
        overview.
        header 시작의 밸리데이션 오류 메시지는 이클립스 버그로 보이며, 4.0 폼의 시작은 xml 버전과 인코딩이 필요없는것 같다.
        http://wiki.gurubee.net/pages/viewpage.action?pageId=26740446 (*설명 참조사이트)
        
        Maven에서는 하나의 프로젝트에서 하나의POM(Project Object Model)을 가진다.
        POM은 프로젝트의 구조와 내용에 대해 설명하고 있으며 pom.xml 파일로 관리된다.
            1. modelVersion : POM model 버전
            2. groupId : 자바 패키지 이름과 동일한 명명 규약을 갖는다. 상위 프로젝트나 조직의 패키지 명을 사용한다.
            3. artifactId : 해당 프로젝트의 고유 아이디를 입력한다.
            4. name : 프로젝트 이름
            5. packaging : 빌드 결과의 패키징을 결정한다. 대부분 JAR, 그 외 WAR, EAR, POM, bundle (OSGi) 등.
            6. version : 버전은 SNAPSHOT과 릴리즈로 구분되며. 릴리즈냐 아니냐에 따라 배포 위치가 달라지게 된다.
            7. url : 프로젝트 사이트 URL
	 -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.sinzoro</groupId>
	<artifactId>test</artifactId>
	<name>sinzoro2</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	
	
    <!-- 
        pom.xml 파일에서 maven 프로퍼티를 사용하여 동적인 환경 구성이 가능하다. 이어지는 의존성에서 참조.
            프로퍼티의 종류에는 project, settings, 환경 변수, Java System, 사용자 정의 프로퍼티가 있다.
    -->
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>4.2.3.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
		<org.springframework.security-version>4.2.3.RELEASE</org.springframework.security-version>
	</properties>
	
	
    <!--
        dependencies (의존성 관리)
        dependency로 설정된 artifact들은 선언된 repository에서 다운로드를 받는다.
            기본 저장 경로는 $USER_HOME/.m2/repository 이다.
        
            1.의존성 분석 순서.
                a. 로컬 저장소에서 의존성 확인
                b. 원격 저장소 리스트에서 의존성 확인
                c. a, b가 실패하면 의존성 에러 보고
                
            2. 필수 선언 항목
                a. groupId : 부분적인 프로젝트나 조직에서의 라이브러리 집합을 식별하기 위해 제공한다.
                b. artifactId : 프로젝트의 실제 이름으로 groupId와 합쳐져 프로젝트 식별에 쓰인다.
                c. version : 선언한 의존성 artifact의 버전으로 프로젝트 내에서 사용하는artifcat의 일관성을 추구할 수 있다.
            
            3. scope
                a. compile : default scope. 컴파일시에 사용되며, 배포시에도 함께 배포되어야 한다.
                b. runtime : 컴파일시 사용 x, 런타임시 사용 o
                c. provided : 컴파일과 유사하나 패키지에는 포함되지 않는다. 컴파일러나 JDK에서 제공한다.
                   ex) servlet.jar의 경우 Servlet 컨테이너에 의하여 제공되기 때문에 이 scope를 사용한다.
                d. test : 테스트를 위해서만 사용
                e. system : 개발자가 직접 jar 파일로 제공하는 라이브러리. 따라서 이 scope의 jar 파일은 repository에서 관리되지 않는다.
            
            4. 의존성의 의존성. 동일한 라이브러리간 버전 충돌을 야기하기도 한다.
                a. exclusions : 의존성에서 발생한 충돌을 해결하기 위해 명시적으로 의존성을 제거. exclusions 엘리먼트를 사용.
            
    -->
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
    
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
		
		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework.security-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>${org.springframework.security-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework.security-version}</version>
		</dependency>
		
		<!-- spring social google -->
		<dependency>
			<groupId>org.springframework.social</groupId>
			<artifactId>spring-social-google</artifactId>
			<version>1.0.0.RELEASE</version>
		</dependency>
		
		<!-- Servlet -->
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api -->
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.3.1</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.10.19</version>
			<scope>test</scope>
		</dependency>
		

		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.4</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
		<dependency>
			<groupId>commons-dbcp</groupId>
			<artifactId>commons-dbcp</artifactId>
			<version>1.4</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-pool/commons-pool -->
		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-pool2 -->
		<!-- 짜증난다. 애초 구성에 포함되지 않았던 의존성이며, 임포트된 프로젝트 오류가 이 의존성 없이 메이븐 업데이트나 클린등으로 해결하지 못했다. 
			commons-pool이 commons-pool2로 대체 되었기에 버전을 올린다.
			도데체, commons-pool이 뭔가?
			모르겠다.
			JVM이 object를 직접 관리하지만 일부 object의 경우 새로 생성하는데 많은 비용이 들고
			이에 따라 object를 어딘가에 담아두는(pool) 것이 더 효율 적일 수 있다.
			이때, object를 pool하게 해주는 많은 오픈소스가 존재하는데 그중 아파치 재단이 만든것이 아래의 commons-pool인
			것으로 추측한다. 그런데, 나는 이것을 활용해 실제 오브젝트를 풀해두는 소스는 작성하지도 않고 있다. 여전히 안개속이다.
			-->
		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-pool2</artifactId>
		    <version>2.4.2</version>
		</dependency>
			
		<!-- https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client -->
		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
			<version>2.0.0-RC</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.195</version>
			<scope>runtime</scope>
		</dependency>

		<!-- spring-jdbc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>

		<!-- Tiles -->
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>3.0.5</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-core</artifactId>
			<version>3.0.5</version>
		</dependency>
		
		<!-- 네이버 lucy xss필터. servlet 단에서 해주는 버전이라는데 별도의 코딩은 필요 없는것으로 보인다. 확인필요. -->
		<dependency>
			<groupId>com.navercorp.lucy</groupId>
			<artifactId>lucy-xss-servlet</artifactId>
			<version>2.0.0</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.16</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	
	
	<!-- Build Settings
        <build>...</build>
        <reporting>...</reporting>
            빌드관련 설정이 있어야 할것으로 보이는데, 우선은 필요한 플러그인들에 대한 설정만 있다... 잘 모르겠다.
            <build>
			  <defaultGoal>install</defaultGoal>
			  <directory>${basedir}/target</directory>
			  <finalName>${artifactId}-${version}</finalName>
			  <filters>
			    <filter>filters/filter1.properties</filter>
			  </filters>
			  ...
			</build>
	-->
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>true</downloadJavadocs>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.5.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<configuration>
					<mainClass>org.test.int1.Main</mainClass>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.1.1</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.1</version>
				<configuration>
					<mainClass>org.h2.tools.Console</mainClass>
					<arguments>
						<argument>-browser</argument>
					</arguments>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
